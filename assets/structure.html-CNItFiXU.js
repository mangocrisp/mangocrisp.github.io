import{_ as l,r as t,c as p,e as r,a,d as i,b as e,o}from"./app-YJLVW2Ql.js";const d="/assets/images/taybct/CloudApplication.png",c={};function u(m,n){const s=t("Badge");return o(),p("div",null,[n[18]||(n[18]=r(`<h1 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构</span></a></h1><h2 id="single" tabindex="-1"><a class="header-anchor" href="#single"><span>Single</span></a></h2><p>单体架构</p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h3><ul><li>优点</li></ul><ol><li>小项目开发快 成本低</li><li>架构简单</li><li>易于测试</li><li>易于部署</li></ol><ul><li>缺点</li></ul><ol><li>大项目模块耦合严重，不易开发，维护，沟通成本高</li><li>新增业务困难</li><li>核心业务与边缘业务混合在一块，出现问题互相影响</li></ol><h3 id="项目结构-1" tabindex="-1"><a class="header-anchor" href="#项目结构-1"><span>项目结构</span></a></h3><p>为了弥补缺点，本项目采用了多模块开发，集中依赖模块运行的方式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── admin 管理模块</span></span>
<span class="line"><span>│       ├── admin-file 文件管理</span></span>
<span class="line"><span>│       └── admin-log 日志管理</span></span>
<span class="line"><span>├── api 接口模块</span></span>
<span class="line"><span>│       └── api-system 系统模块接口</span></span>
<span class="line"><span>├── auth 鉴权模块</span></span>
<span class="line"><span>├── common 通用公共代码</span></span>
<span class="line"><span>├── laboratory 实验室功能</span></span>
<span class="line"><span>│       ├── lab-flux 模拟接口(Flux)</span></span>
<span class="line"><span>│       └── lab-mock 模拟接口</span></span>
<span class="line"><span>├── modules 业务模块</span></span>
<span class="line"><span>│       ├── module-lf 流程管制</span></span>
<span class="line"><span>│       ├── module-scheduling 任务调度</span></span>
<span class="line"><span>│       └── module-system 系统模块</span></span>
<span class="line"><span>├── run 运行模块</span></span>
<span class="line"><span>└── pom.xml 配置依赖/打包管理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">接口模块</p><p>模块与模块之前通过接口相互调用解耦，默认只有系统模块，所以如果后面还有其他模块，并且有需要相互调用的，就继续往下面添加</p></div><div class="hint-container info"><p class="hint-container-title">流程管制</p><p>需要结合<a href="https://site.logic-flow.cn/tutorial/about" target="_blank" rel="noopener noreferrer">LogicFlow</a>来使用</p></div><div class="hint-container info"><p class="hint-container-title">运行模块</p><p>引入需要运行的业务模块和功能集中运行为一个单服务，可以很方便的部署，并且每个业务模块都是经过打包成 jar 包的，开发运行启动速度也非常快</p></div><div class="hint-container info"><p class="hint-container-title">实验室功能</p><p>有些时候，我们写了一些和第三方对接的接口，但是又不能及时和第三对接（可能是网络原因，也可能是人家只是写了接口文档，接口还没部署，或者是我们本身测试环境部署测试比较麻烦），于是我们可以在开发的时候就自己模拟第三方接口返回数据等功能</p></div><h2 id="clud" tabindex="-1"><a class="header-anchor" href="#clud"><span>Clud</span></a></h2><p>微服务架构是分布式架构(SOA)架构的一种拓展，这种架构模式下它拆分粒度更小，服务更独立，把应用拆分一个个微小的服务。微服务的关键在于微小、独立、轻量级通信</p><h3 id="优缺点-1" tabindex="-1"><a class="header-anchor" href="#优缺点-1"><span>优缺点</span></a></h3><ul><li>优点</li></ul><ol><li>便于特定业务功能的聚焦</li><li>每个微服务都可以被⼀个⼩团队单独实施（开发、测试、部署上线、运维），团队合作⼀定程度解耦，便于实施敏捷开发</li><li>便于重⽤和模块之间的组装</li><li>不同的微服务可以使⽤不同的语⾔开发，松耦合</li><li>更容易引⼊新技术</li><li>可以更好的实现DevOps 开发运维⼀体化</li></ol><ul><li>缺点</li></ul><ol><li>分布式复杂难以管理，当服务量增加，管理越加复杂</li><li>微服务架构下，分布式链路跟踪难</li></ol><h3 id="项目结构-2" tabindex="-1"><a class="header-anchor" href="#项目结构-2"><span>项目结构</span></a></h3><p>同样为了弥补缺点，本项目推荐使用<a href="https://cn.dubbo.apache.org/zh-cn/overview/what/" target="_blank" rel="noopener noreferrer">Dubbo</a>来实现服务模块与模块之间的调用通信，使用<a href="https://skywalking.apache.org/zh/2020-04-19-skywalking-quick-start/" target="_blank" rel="noopener noreferrer">SkyWalking</a>来实现链路追踪</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── _ini 存放一些初始化配置文件</span></span>
<span class="line"><span>├── admin 管理模块</span></span>
<span class="line"><span>│       ├── admin-file 文件管理</span></span>
<span class="line"><span>│       ├── admin-log 日志管理</span></span>
<span class="line"><span>│       └── admin-monitor 运行监控</span></span>
<span class="line"><span>├── api 接口模块</span></span>
<span class="line"><span>│       ├── api-proxy 代理接口</span></span>
<span class="line"><span>│       └── api-system 系统模块接口</span></span>
<span class="line"><span>├── auth 鉴权模块</span></span>
<span class="line"><span>├── common 通用公共代码</span></span>
<span class="line"><span>├── gateway 网关模块（后端服务统一入口）</span></span>
<span class="line"><span>├── laboratory 实验室功能</span></span>
<span class="line"><span>│       ├── lab-flux 模拟接口(Flux)</span></span>
<span class="line"><span>│       └── lab-mock 模拟接口</span></span>
<span class="line"><span>├── modules 业务模块</span></span>
<span class="line"><span>│       ├── module-es 搜索引擎</span></span>
<span class="line"><span>│       ├── module-lf 流程管制</span></span>
<span class="line"><span>│       ├── module-scheduling 任务调度</span></span>
<span class="line"><span>│       └── module-system 系统模块</span></span>
<span class="line"><span>├── run 运行模块</span></span>
<span class="line"><span>└── pom.xml 配置依赖/打包管理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">代理接口</p><p>有的时候我们部署项目，服务器资源提供者（客户）只给我们提供单台有互联网或者有与其他第三方有通讯能力的<code>IP</code>，虽然可能使用<code>Nginx</code>等方式做<code>正/反向代理</code>,但是我们也可以自行写一个单独的小型的纯接口访问的微服务到那台服务器上做对接</p></div><div class="hint-container warning"><p class="hint-container-title">运行监控</p><p>非必要，可以通过检查日志实现查看各个服务的运行状态，而不需要跑得对应的服务器上去查看，但是是通过暴露一些接口来实现，所以存在很多安全隐患，谨慎使用！！！当然也有很多更先进的工具可以实现服务器运行监控，例如<a href="https://www.zabbix.com/cn" target="_blank" rel="noopener noreferrer">ZABBIX</a></p></div><p>微服务应用模块</p><figure><img src="`+d+'" alt="微服务应用模块" tabindex="0" loading="lazy"><figcaption>微服务应用模块</figcaption></figure>',29)),a("ul",null,[a("li",null,[n[0]||(n[0]=i("AuthApplication")),e(s,{text:"必须",type:"tip"}),n[1]||(n[1]=i("：鉴权服务"))]),a("li",null,[n[2]||(n[2]=i("ESApplication")),e(s,{text:"可选",type:"note"}),n[3]||(n[3]=i("：全文搜索服务"))]),a("li",null,[n[4]||(n[4]=i("FileApplication")),e(s,{text:"建议",type:"info"}),n[5]||(n[5]=i("：文件管理服务"))]),a("li",null,[n[6]||(n[6]=i("GatewayApplication")),e(s,{text:"必须",type:"tip"}),n[7]||(n[7]=i("：网关服务"))]),a("li",null,[n[8]||(n[8]=i("LogApplication")),e(s,{text:"建议",type:"info"}),n[9]||(n[9]=i("：日志服务"))]),a("li",null,[n[10]||(n[10]=i("LogicFlowApplication")),e(s,{text:"可选",type:"note"}),n[11]||(n[11]=i("：流程管理服务"))]),a("li",null,[n[12]||(n[12]=i("MonitorApplication")),e(s,{text:"可选",type:"note"}),n[13]||(n[13]=i("：运行监控"))]),a("li",null,[n[14]||(n[14]=i("SchedulingApplication")),e(s,{text:"建议",type:"info"}),n[15]||(n[15]=i("：任务调度"))]),a("li",null,[n[16]||(n[16]=i("SystemApplication")),e(s,{text:"必须",type:"tip"}),n[17]||(n[17]=i("：系统服务"))])])])}const g=l(c,[["render",u],["__file","structure.html.vue"]]),h=JSON.parse('{"path":"/code/taybct/get-started/structure.html","title":"项目结构","lang":"zh-CN","frontmatter":{"shortTitle":"项目结构","description":"项目结构","index":true,"comment":true,"article":true,"timeline":true,"lastUpdated":true,"editLink":true,"contributors":true,"order":4,"dir":{"order":4},"icon":"ph:tree-structure-light","isOriginal":false,"date":"2024-09-28T00:00:00.000Z","category":["代码笔记"],"tag":["后端","Java","SpringBoot","Spring Taybct","开发框架","快速开始","项目结构"],"head":[["meta",{"property":"og:url","content":"https://mangocrisp.github.io/code/taybct/get-started/structure.html"}],["meta",{"property":"og:site_name","content":"Mango Crisp"}],["meta",{"property":"og:title","content":"项目结构"}],["meta",{"property":"og:description","content":"项目结构"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mangocrisp.github.io/assets/images/taybct/CloudApplication.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-28T08:45:47.000Z"}],["meta",{"property":"article:author","content":"Mango Crisp"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"Spring Taybct"}],["meta",{"property":"article:tag","content":"开发框架"}],["meta",{"property":"article:tag","content":"快速开始"}],["meta",{"property":"article:tag","content":"项目结构"}],["meta",{"property":"article:published_time","content":"2024-09-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-28T08:45:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目结构\\",\\"image\\":[\\"https://mangocrisp.github.io/assets/images/taybct/CloudApplication.png\\"],\\"datePublished\\":\\"2024-09-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-28T08:45:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mango Crisp\\",\\"url\\":\\"https://github.com/mangocrisp\\"}]}"]]},"headers":[{"level":2,"title":"Single","slug":"single","link":"#single","children":[{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"项目结构","slug":"项目结构-1","link":"#项目结构-1","children":[]}]},{"level":2,"title":"Clud","slug":"clud","link":"#clud","children":[{"level":3,"title":"优缺点","slug":"优缺点-1","link":"#优缺点-1","children":[]},{"level":3,"title":"项目结构","slug":"项目结构-2","link":"#项目结构-2","children":[]}]}],"git":{"createdTime":1726308287000,"updatedTime":1727513147000,"contributors":[{"name":"yinxijie","email":"yinxijie@gzgxinfo.com","commits":2},{"name":"XiJieYin","email":"2415446179@qq.com","commits":1}]},"readingTime":{"minutes":4.86,"words":1457},"filePathRelative":"code/taybct/get-started/structure.md","localizedDate":"2024年9月28日","excerpt":"\\n<h2>Single</h2>\\n<p>单体架构</p>\\n<h3>优缺点</h3>\\n<ul>\\n<li>优点</li>\\n</ul>\\n<ol>\\n<li>小项目开发快 成本低</li>\\n<li>架构简单</li>\\n<li>易于测试</li>\\n<li>易于部署</li>\\n</ol>\\n<ul>\\n<li>缺点</li>\\n</ul>\\n<ol>\\n<li>大项目模块耦合严重，不易开发，维护，沟通成本高</li>\\n<li>新增业务困难</li>\\n<li>核心业务与边缘业务混合在一块，出现问题互相影响</li>\\n</ol>\\n<h3>项目结构</h3>\\n<p>为了弥补缺点，本项目采用了多模块开发，集中依赖模块运行的方式</p>"}');export{g as comp,h as data};
